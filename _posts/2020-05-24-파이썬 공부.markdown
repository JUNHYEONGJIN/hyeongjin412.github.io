---
layout: single
title:  "파이썬 공부"
---

# 파이썬 공부!!

###   ●백준 알고리즘 11399번 ATM

************************************************************************************************************************************

문제)

인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.

사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자. [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다. 4번 사람은 3+1+4+3 = 11분, 5번 사람은 3+1+4+3+2 = 13분이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다.

줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 1분만에, 5번 사람은 1+2 = 3분, 1번 사람은 1+2+3 = 6분, 4번 사람은 1+2+3+3 = 9분, 3번 사람은 1+2+3+3+4 = 13분이 걸리게 된다. 각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = 32분이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.

줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오. 

****************************************************************************************************************************************************************

입력)

첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000)

******************************************************************************************************************************************************************************************

출력)

첫째 줄에 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 출력한다.

**************************************************************************************************************

예제 입력)

```
5
3 1 4 3 2
```

예제 출력)

```
32
```

*******************************************************************************************************************************************

풀이 방법:  작은 수부터 차례대로 정렬 후 값을 더한다.

************************************************************************************************************************************************************************

코드)

```
<코드>
N = int(input("인원수"))
P = list(map(int, input("걸리는 시간").split()))



if N==1:
    print(P[0])

else:
    P.sort()
    sum1 = 0
    sum2 = 0
    for i in range(N):
        sum1 = sum1+P[i]    
        sum2 = sum2+sum1
    print(sum2)

```

*****************************************************************************************************************************************



### ●백준 알고리즘 2869번 달팽이는 올라가고 싶다.

************************************************************************************************************************************

문제) 

땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.

달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.

달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.

*************************************************************************************************************

입력)

첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)

**********************************************************************************************************************************

출력)

첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.

**********************************************************************************************

예제 입력)

```
2 1 5
```

예제 출력)

```
4
```

*************************************************************************************************************************

풀이 방법: 정상에 올라오면 더이상 내려오지 않기 때문에 A*K-B(K-1) = V이다. (K = 나무를 오르는데 걸리는 일수)

K = (V-B)/(A-B) 이다 . K가 자연수가 아닐경우  1을 더한다. 

**********************************************************************************************************

코드)

~~~
A,B,V = map(int,input().split())
K = (V-B)/(A-B)
if K%1 == 0:
	print(int(K)
else:
	print(int(K)+1)
~~~



###  ● 백준 2965번 캥거루 세마리

************************************************************************************************************************************

문제) 

캥거루 세 마리가 사막에서 놀고 있다. 사막에는 수직선이 하나 있고, 캥거루는 서로 다른 한 좌표 위에 있다.

한 번 움직일 때, 바깥쪽의 두 캥거루 중 한 마리가 다른 두 캥거루 사이의 정수 좌표로 점프한다. 한 좌표 위에 있는 캥거루가 두 마리 이상일 수는 없다.

캥거루는 최대 몇 번 움직일 수 있을까?

*************************************************************************************************************

입력)

첫째 줄에 세 캥거루의 초기 위치 A, B, C가 주어진다. (0 < A < B < C < 100)

**********************************************************************************************************************************

출력)

캥거루가 최대 몇 번 움직일 수 있는지 출력한다.

**********************************************************************************************

예제 입력)

```
3 5 9
```

예제 출력)

```
3
```

*************************************************************************************************************************

풀이 방법: 캥거루 사이의 거리중 더 큰 값을 알아내고 그 사이의 수를 구한다. 

(B-A)의 값과 (C-B)의 값을 비교하여 더 큰 값을 알아낸 후 그 값에서 1을 뺀다.

매우 간단한 코드다!

**********************************************************************************************************

코드)

~~~
A,B,C = map(int,input().split())


print((B-A)-1 if (B-A)>(C-B) else (C-B)-1 )
~~~



